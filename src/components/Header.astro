---
export interface Props {
  navItems: ListItem[];
}

export interface ListItem {
  name: string;
  link: string;
}

const { navItems } = Astro.props;
---

<header>
  <div class="logo">
    <h1>Daniel Cazarez</h1>
  </div>
  <nav class="nav">
    <ul class="nav-list">
      {
        navItems.map((item) => (
          <li class="nav-item">
            <a href={item.link} class="nav-link">
              {item.name}
            </a>
          </li>
        ))
      }
    </ul>
  </nav>
  <button class="hamburger">
    <span class="bar"></span>
    <span class="bar"></span>
    <span class="bar"></span>
  </button>
</header>

<style lang="scss">
  @import "../styles/variables.scss";

  header {
    background-color: #11111a;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 2;
    display: flex;
    align-items: center;
    height: 10vh;
    color: #fff;
  }

  .logo {
    padding: 1rem;

    h1 {
      font-size: 1.5rem;
      font-weight: 500;
    }
  }

  .nav {
    margin-left: auto;

    &-list {
      display: flex;
      list-style: none;
    }

    &-item {
      margin: 0 2rem;
    }

    &-link {
      text-decoration: none;
      color: #fff;
      font-size: 1rem;
      font-weight: 400;

      &:hover {
        color: $color-primary;
      }
    }
  }

  .hamburger {
    display: none;
    margin-left: auto;
    margin-right: 1em;
    background: none;
    border: none;
  }

  @media screen and (max-width: 768px) {
    .hamburger {
      display: block;
      z-index: 3;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
    }

    .bar {
      width: 30px;
      height: 3px;
      margin: 0.25em 0;
      transition: 0.4s;
      background-color: #fff;
    }

    .nav {
      position: absolute;
      top: 0;
      right: -100%;
      width: 100%;
      height: 100vh;
      background-color: #000;
      transition: 0.4s;

      &-list {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 100%;
      }

      &-item {
        margin: 2em 0;
      }
    }

    .nav-link {
      color: #fff;
      font-size: 1.5rem;
      text-transform: uppercase;
    }

    .hamburger.open {
      .bar {
        &:nth-child(1) {
          transform: rotate(-45deg) translate(-5px, 6px);
        }

        &:nth-child(2) {
          opacity: 0;
        }

        &:nth-child(3) {
          transform: rotate(45deg) translate(-5px, -6px);
        }
      }
    }

    .nav.open {
      right: 0;
    }
  }
</style>

<script>
  const hamburger = document.querySelector(".hamburger");
  const nav = document.querySelector(".nav");
  const html = document.querySelector("html");
  const navLinks = document.querySelectorAll(".nav-link");

  hamburger?.addEventListener("click", () => {
    hamburger.classList.toggle("open");
    nav?.classList.toggle("open");
    html?.classList.toggle("no-scroll");
  });

  navLinks.forEach((link) => {
    link.addEventListener("click", () => {
      hamburger?.classList.remove("open");
      nav?.classList.remove("open");
      html?.classList.remove("no-scroll");
    });
  });
</script>
